1. List the Operators in Java?
--> 	1. Arithmetic operators (+, -, *, /, %)
	2. Relational operators (==, !=, >, <, >=, <=)
	3. Logical operators (&&, ||, !)
	4. Assignment operators (=, +=, -=, *=, /=, %=)
	5. Increment and decrement operators (++ and --)
	6. Bitwise operators (&, |, ^, ~, <<, >>, >>>)
	7. Conditional operator (?:)
	8. instanceof operator
	9. Unary operators (+, -, ++, --, !)
	10. Ternary operator (?:)
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

2. Explain about Increment and Decrement operators and give an examples
-->	Increment and decrement operators in Java, denoted by "++" and "--" respectively, are used to increase or decrease the value of a variable by 1.

	int x = 5;

	// Incrementing x by 1
	x++;
	// Now, x is 6

	// Decrementing x by 1
	x--;
	// Now, x is 5 again

	These operators can be used in prefix (++x) or postfix (x++) forms. The difference lies in when the value is modified. Prefix increments or decrements the value before using it, 	while postfix uses the current value before modifying it.

	int y = 10;

	// Prefix increment
	int prefixResult = ++y;
	// Now, y is 11 and prefixResult is also 11

	// Postfix increment
	int postfixResult = y++;
	// Now, y is 12 but postfixResult is 11 because the value of y before the increment was used

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

3. What are the Conditional Operators in Java?
-->	In Java, the conditional operator is denoted by "?:". It's a ternary operator used for conditional expressions.

	Syntax:
	condition ? expression1 : expression2


	Explanation:

	If the condition is true, expression1 is evaluated.
	If the condition is false, expression2 is evaluated.
	
	int x = 10;
	int y = (x > 5) ? 100 : 200;
	// Since x > 5 is true, y will be assigned the value 100

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

4. What are the types of operators based on the number of operands?
-->	Operators in Java can be categorized based on the number of operands they work with:

	Unary Operators: These operators work with a single operand.
	Example: Unary minus (-x), unary plus (+x), increment (++x), decrement (--x), logical negation (!x).
	Binary Operators: These operators work with two operands.
	Example: Addition (x + y), subtraction (x - y), multiplication (x * y), division (x / y), assignment (x = y), comparison (x == y), logical AND (x && y), logical OR (x || y), 		bitwise AND (x & y), bitwise OR (x | y), bitwise XOR (x ^ y), bitwise shift (x << y, x >> y).
	Ternary Operator: This operator works with three operands.
	Example: Conditional operator (condition ? expr1 : expr2).

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

5. What are the conditional Statements and use of conditional statements in Java?
-->	Conditional statements in Java are pivotal for decision-making within programs. They enable the execution of specific blocks of code based on whether certain conditions are met. 	Here are the main types of conditional statements in Java along with their applications:

	if Statement: Utilized to execute a block of code if a specified condition evaluates to true. It's fundamental for branching logic in Java programs.Example:

	if (condition) {
	    // code to execute if condition is true
	}


	if-else Statement: Enables the execution of one block of code if the condition is true, and another block if the condition is false. It's used when there are two possible 	outcomes.Example:

	if (condition) {
	    // code to execute if condition is true
	} else {	
	   // code to execute if condition is false
	}


	else-if ladder: Employed when there are multiple conditions to be checked. It consists of multiple if-else statements chained together. Useful for scenarios with several potential 	outcomes.Example:

	if (condition1) {
	    // code to execute if condition1 is true
	} else if (condition2) {
	    // code to execute if condition2 is true
	} else {
	    // code to execute if none of the conditions are true
	}


	switch Statement: Allows the execution of one block of code from multiple options based on the value of an expression. It's beneficial when dealing with multiple possible values 	for a variable.Example:
	
	switch (expression) {
	    case value1:
	        // code to execute if expression equals value1
	        break;
	    case value2:
	        // code to execute if expression equals value2
	        break;
	    default:
	        // code to execute if expression does not match any case
	}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

6. What is the syntax of if else statement?
-->	The syntax of the if-else statement in Java is:
	
	if (condition) {
	    // code to execute if condition is true
	} else {
	    // code to execute if condition is false
	}
	
	
	This statement provides a way to execute different blocks of code based on whether a specified condition is true or false, enhancing the flexibility and functionality of Java 	programs.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

7. What are the 3 types of iterative statements in java?
-->	The three types of iterative statements in Java are:
			
	a) for loop: Used to execute a block of code repeatedly for a fixed number of times. It consists of three parts: initialization, condition, and iteration expression.Syntax:
	
	for (initialization; condition; iteration) {
	    // code to be executed
	}
	
	
	b) while loop: Executes a block of code repeatedly as long as a specified condition is true. It continuously evaluates the condition before each iteration.Syntax:
	
	while (condition) {
	    // code to be executed
	}
	
	
	
	c) do-while loop: Similar to a while loop, but it guarantees the execution of the block of code at least once before checking the condition. It evaluates the condition after each 	iteration.Syntax:
	
	do {
	    // code to be executed
	} while (condition);

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

8. What do you mean by an Array?
-->	An array in Java is a data structure used to store a fixed-size sequential collection of elements of the same data type. It allows for efficient storage and retrieval of multiple 	values under a single variable name. Key features of arrays include:
	
	Sequential Storage: Elements are stored in contiguous memory locations.
	Indexed Access: Each element is accessed using an index, starting from 0 for the first element.
	Fixed Size: The size of an array is predetermined at the time of creation and cannot be changed dynamically.
	Homogeneous Elements: All elements in an array must be of the same data type, whether primitive types (e.g., int, char) or objects (e.g., String).

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

9. How to create an Array?
-->	To create an array in Java, follow these steps:
	
	Declare the array variable:
	dataType[] arrayName;
	
	Initialize the array:
	With a specified size:
	
	arrayName = new dataType[arraySize];
	
	With initial values:
	dataType[] arrayName = {value1, value2, ..., valueN};
	
	
	For example:
	
	To create an array of integers with a specified size:
	
	int[] numbers = new int[5]; // Creates an array of integers with size 5
	
	
	To create an array of strings with initial values:
	
	String[] colors = {"Red", "Green", "Blue"}; // Creates an array of strings with initial values
		
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

10. State the difference between StringBuffer and StringBuilder in Java.
-->	StringBuffer and StringBuilder in Java differ primarily in their thread-safety characteristics:
	
	StringBuffer:
	StringBuffer is synchronized, ensuring thread safety.
	It is designed for use in multithreaded environments to prevent data corruption when multiple threads access the same instance concurrently.
	Operations on StringBuffer are slower due to synchronization overhead.
	Preferred when working in multithreaded environments or when thread safety is crucial.
			
	StringBuilder:
	StringBuilder is not synchronized, making it faster.
	It does not incur the overhead of synchronization, resulting in better performance.
	Suitable for single-threaded environments or scenarios where thread safety is not a concern.
	Preferred for better performance in single-threaded applications.
	In conclusion, StringBuffer is chosen for its thread safety, while StringBuilder is preferred for its superior performance in single-threaded scenarios.	